<?xml version="1.0" encoding="utf-8"?>
<dbobject object_name="INU_IMPORT" owner="PM_DBA" type="package" script_version="2017-09-20.01">
  <ddlmain version="2017-09-20.01">
    create or replace PACKAGE               {owner}.{object_name}
IS
   -- Author  : SERGEY
   -- Created : 16.10.2006 18:27:13
   -- Modified : 24.04.2014
   procedure createfileforexternaltable (in_filename in varchar2, in_filecontent in long);
   procedure createfileforexternaltb_vs (in_filename in varchar2, in_filecontent in long);
   procedure create_file_for_blob (in_filename in varchar2, in_blob blob);

   PROCEDURE createfileforexternaltableraw(filename VARCHAR2, filecontent LONG);

   FUNCTION execscript (scripttext VARCHAR2)
      RETURN NUMBER;

   FUNCTION file_exists (
      loc_in     IN   VARCHAR2,
      file_in    IN   VARCHAR2,
      close_in   IN   BOOLEAN := FALSE
   )
      RETURN BOOLEAN;

--  function CreateExternalTable(tb_name varchar2,file_name varchar) return number;
   PROCEDURE setexception (p_session_id NUMBER, our_id NUMBER);
   FUNCTION isnumeric (param varchar2) RETURN number;
   FUNCTION isdate(p_inDate varchar2, p_format varchar2) RETURN number;

END inu_import;
  </ddlmain>
  <ddlpackagebody>
    create or replace PACKAGE BODY               {owner}.{object_name}
IS
/* Filename on companon disk: filexist.sf */
   FUNCTION file_exists (
      loc_in     IN   VARCHAR2,
      file_in    IN   VARCHAR2,
      close_in   IN   BOOLEAN := FALSE
   )
      RETURN BOOLEAN
   IS
      file_handle   UTL_FILE.file_type;
      retval        BOOLEAN;

      PROCEDURE closeif
      IS
      BEGIN
         IF close_in AND UTL_FILE.is_open (file_handle)
         THEN
            UTL_FILE.fclose (file_handle);
         END IF;
      END;
   BEGIN
      /* Open the file. */
      file_handle := UTL_FILE.fopen (loc_in, file_in, 'R');
      /* Return the result of a check with IS_OPEN. */
      retval := UTL_FILE.is_open (file_handle);
      closeif;
      RETURN retval;
   EXCEPTION
      WHEN OTHERS
      THEN
         closeif;
         RETURN FALSE;
   END;


procedure create_file_for_blob (in_filename in varchar2, in_blob blob)
  is
--   var_output_file     utl_file.file_type;
--
--   var_content         long;
--   var_current_content long;
--   var_pos             number;
--   const_max_length    number;
  var_path            varchar2 (100);
  l_file      UTL_FILE.FILE_TYPE;
  l_buffer    RAW(32767);
  l_amount    BINARY_INTEGER := 32767;
  l_pos       INTEGER := 1;
  l_blob_len  INTEGER;
BEGIN
  -- Get LOB locator
  select directory_path
    into var_path
  from dba_directories
  where upper(directory_name) = 'IMPDIR';


  l_blob_len := DBMS_LOB.getlength(in_blob);

  -- Open the destination file.
  l_file := UTL_FILE.fopen(var_path,in_filename,'wb', 32767);

  -- Read chunks of the BLOB and write them to the file
  -- until complete.
  WHILE l_pos &lt; l_blob_len LOOP
    DBMS_LOB.read(in_blob, l_amount, l_pos, l_buffer);
    UTL_FILE.put_raw(l_file, l_buffer, TRUE);
    l_pos := l_pos + l_amount;
  END LOOP;

  -- Close the file.
  UTL_FILE.fclose(l_file);

EXCEPTION
  WHEN OTHERS THEN
    -- Close the file if something goes wrong.
    IF UTL_FILE.is_open(l_file) THEN
      UTL_FILE.fclose(l_file);
    END IF;
    RAISE;
END;
procedure createfileforexternaltable (in_filename in varchar2, in_filecontent in long)
  is
  var_output_file     utl_file.file_type;
  var_path            varchar2 (100);
  var_content         long;
  var_current_content long;
  var_pos             number;
  const_max_length    number;
begin

   -- dbms_output.enable(100000);
  select directory_path
    into var_path
  from dba_directories
  where upper(directory_name) = 'IMPDIR';
  const_max_length:=4000;
  var_output_file := utl_file.fopen (var_path, in_filename, 'A', 8192);
  var_content := in_filecontent;
  while (length (var_content) &gt; 0)
  loop
    var_pos := instr(var_content, '@@@');
    -- dbms_output.put_line('pos='||var_pos);
    if (var_pos = 0) then
      -- dbms_output.put_line('pos=0, var_content='||var_content);
      while length(var_content)&gt;const_max_length loop
        utl_file.put (var_output_file, substr(var_content, 0, const_max_length-1));
        var_content := substr(var_content, const_max_length);
      end loop;
     -- dbms_output.put_line('var_content after cycle'||var_content);
      utl_file.put_line (var_output_file, var_content);
      var_content := '';
    else
         var_current_content := substr (var_content, 0, var_pos - 1);
         var_content := substr (var_content, var_pos + 3);
         -- dbms_output.put_line('var_current_content='||var_current_content);
         -- dbms_output.put_line('var_content='||var_content);
         while length(var_current_content)&gt;const_max_length loop
           utl_file.put (var_output_file, substr(var_current_content, 0, const_max_length - 1));
           -- dbms_output.put_line('var_current_content substr ='|| substr(var_current_content,0,const_max_length-1)  );
           var_current_content := substr(var_current_content, const_max_length);
         end loop;
         -- dbms_output.put_line('var_current_content final ='||var_current_content);
         utl_file.put_line(var_output_file, var_current_content);
    end if;
  end loop;
  utl_file.fclose(var_output_file);
end createfileforexternaltable;
procedure createfileforexternaltb_vs (in_filename in varchar2, in_filecontent in long)
  is
  var_output_file     utl_file.file_type;
  var_path            varchar2 (100);
  var_content         long;
  var_current_content long;
  var_pos             number;
  const_max_length    number;
begin
   -- dbms_output.enable(100000);
  select directory_path into var_path
  from dba_directories
  where upper(directory_name) = 'IMPDIR';
  const_max_length:=4000;
  var_output_file := utl_file.fopen (var_path, in_filename, 'A', 8192);
  var_content := in_filecontent;
  -- dbms_output.put_line('pos=0, var_content='||var_content);
  while length(var_content)&gt;const_max_length loop
    utl_file.put (var_output_file, substr(var_content, 0, const_max_length-1));
    var_content := substr(var_content, const_max_length);
  end loop;
 -- dbms_output.put_line('var_content after cycle'||var_content);
  -- utl_file.put_line (var_output_file, var_content);
  utl_file.put (var_output_file, var_content);
  var_content := '';
  utl_file.fclose(var_output_file);
end createfileforexternaltb_vs;
   PROCEDURE createfileforexternaltableraw (filename IN VARCHAR2, filecontent IN LONG)
   IS
      output_file        UTL_FILE.file_type;
      PATH               VARCHAR2 (100);
      p_content          LONG;
      current_content    VARCHAR2 (4000);
      current_content1   VARCHAR2 (4000);
      p_pos              NUMBER;
   max_length         NUMBER;
   BEGIN
    SELECT DIRECTORY_PATH INTO PATH FROM dba_directories WHERE DIRECTORY_NAME = 'IMPDIR';
   max_length:=4000;
   output_file := UTL_FILE.fopen (PATH, filename, 'AB', 8192);--
   p_content := filecontent;
   WHILE (LENGTH (p_content) &gt; 0)
   LOOP
      p_pos := INSTR (p_content, '@@@');

      IF (p_pos = 0) THEN
        --current_content := p_content;
        -- dbms_output.put_line('pos0='||p_pos);
        -- dbms_output.put_line(p_content);
        WHILE length(p_content)&gt;max_length LOOP
          UTL_FILE.put_raw (output_file, UTL_RAW.CAST_TO_RAW(substr(p_content,0,max_length-1)), true);
          p_content:=substr(p_content,max_length);
       END LOOP;
        UTL_FILE.put_raw (output_file, UTL_RAW.CAST_TO_RAW(p_content), true);
        p_content := '';
   UTL_FILE.put_line(output_file, '');
        ELSE
          current_content := SUBSTR (p_content, 0, p_pos - 1);
          p_content := SUBSTR (p_content, p_pos + 3);
          -- dbms_output.put_line('pos='||p_pos);
          --dbms_output.put_line('current_content='||current_content);
          --dbms_output.put_line('p_content='||p_content);
          WHILE length(current_content)&gt;max_length LOOP
            UTL_FILE.put_raw (output_file, UTL_RAW.CAST_TO_RAW(substr(current_content,0,max_length-1)), true);
            current_content:=substr(current_content,max_length);
          END LOOP;
          UTL_FILE.put_raw (output_file, UTL_RAW.CAST_TO_RAW(current_content), true);
          UTL_FILE.put_raw (output_file, UTL_RAW.CAST_TO_RAW(chr(10)), true);

        END IF;
     END LOOP;
     UTL_FILE.fclose (output_file);
  END createfileforexternaltableraw;

   FUNCTION execscript (scripttext VARCHAR2)
      RETURN NUMBER
   IS
      v_cursor     NUMBER;
      v_num_rows   NUMBER;
   BEGIN
      v_cursor := DBMS_SQL.open_cursor;

      BEGIN
         DBMS_SQL.parse (v_cursor, scripttext, DBMS_SQL.v7);
         v_num_rows := DBMS_SQL.EXECUTE (v_cursor);
      EXCEPTION
         WHEN OTHERS
         THEN
            RAISE;
            RETURN 0;
      END;

      RETURN 1;
   END;

   PROCEDURE setexception (p_session_id NUMBER, our_id NUMBER)
   IS
      v_error_code   NUMBER;
      v_error_text   VARCHAR2 (200);
   BEGIN
      v_error_code := -1 * SQLCODE;
      v_error_text := SUBSTR (SQLERRM, 1, 200);
/*  insert into IMPORT_EXEPTIONS_TEMP_IEXT(SESSION_ID,NUM,EXEPTION_TEXT,CODE)
         values(p_session_id,
                our_id,
                v_error_text,
                '0'||v_error_code);*/
  END;

  FUNCTION isnumeric (param varchar2) RETURN number
  AS
      dummy number;
  BEGIN
      dummy:=to_number(param);
      RETURN 1;
   EXCEPTION
      WHEN OTHERS THEN
          RETURN 0;
  END isnumeric;

  FUNCTION isdate(p_inDate varchar2, p_format varchar2) RETURN number
  AS
    v_dummy date;
  BEGIN
    v_dummy :=  TO_DATE(p_inDate,p_format);
    RETURN 1;
  EXCEPTION
    WHEN OTHERS THEN RETURN 0;
  END isdate;
END inu_import;
  </ddlpackagebody>
  <ddls>
    <ddl>grant execute on {owner}.{object_name} to RTIME_DBA</ddl>
    <ddl>grant execute on {owner}.{object_name} to {proxy}</ddl>
  </ddls>
</dbobject>